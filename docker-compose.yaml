version: '3'

services:
    service_1:
        build:
            context: .
            dockerfile: Dockerfile
            target: service_1
        environment:
            - PATH_PREFIX=/api/service_1
            - PORT=3001
        labels:
            - traefik.enable=true
            - 'traefik.http.routers.http-service_1.rule=Host(`${HOST}`) && PathPrefix(`/api/service_1`)'
            - traefik.http.routers.http-service_1.entryPoints=http
            - traefik.http.routers.http-service_1.middlewares=gzip

            - traefik.http.routers.https-service_1.entryPoints=https
            - 'traefik.http.routers.https-service_1.middlewares=https-service_1-stripprefix,gzip'
            - 'traefik.http.routers.https-service_1.rule=Host(`${HOST}`) && PathPrefix(`/api/service_1`)'
            - traefik.http.routers.https-service_1.tls.certresolver=letsencrypt
            - traefik.http.routers.https-service_1.tls=true

            - 'coolify.applicationId=${APPLICATION_ID}'
            - coolify.type=application
            - coolify.managed=true
            - coolify.version=4.0.0-beta.196
            - coolify.name=service_1
            - coolify.pullRequestId=0
        networks:
            coo0ccc: null
        restart: unless-stopped
        container_name: service_1

    service_2:
        build:
            context: .
            dockerfile: Dockerfile
            target: service_2
        environment:
            - PATH_PREFIX=/api/service_2
            - PORT=3002
        labels:
            - traefik.enable=true
            - 'traefik.http.routers.http-service_2.rule=Host(`${HOST}`) && PathPrefix(`/api/service_2`)'
            - traefik.http.routers.http-service_2.entryPoints=http
            - traefik.http.routers.http-service_2.middlewares=gzip

            - traefik.http.routers.https-service_2.entryPoints=https
            - 'traefik.http.routers.https-service_2.middlewares=https-service_2-stripprefix,gzip'
            - 'traefik.http.routers.https-service_2.rule=Host(`${HOST}`) && PathPrefix(`/api/service_2`)'
            - traefik.http.routers.https-service_2.tls.certresolver=letsencrypt
            - traefik.http.routers.https-service_2.tls=true

            - 'coolify.applicationId=${APPLICATION_ID}'
            - coolify.type=application
            - coolify.managed=true
            - coolify.version=4.0.0-beta.196
            - coolify.name=service_2
            - coolify.pullRequestId=0
        networks:
            coo0ccc: null
        restart: unless-stopped
        container_name: service_2

    web:
        build:
            context: .
            dockerfile: Dockerfile
            target: web
        labels:
            - traefik.enable=true
            - 'traefik.http.routers.http-web.rule=Host(`${HOST}`) && PathPrefix(`/`)'
            - traefik.http.routers.http-web.entryPoints=http
            - traefik.http.routers.http-web.middlewares=gzip

            - traefik.http.routers.https-web.entryPoints=https
            - 'traefik.http.routers.https-web.middlewares=https-web-stripprefix,gzip'
            - 'traefik.http.routers.https-web.rule=Host(`${HOST}`) && PathPrefix(`/`)'
            - traefik.http.routers.https-web.tls.certresolver=letsencrypt
            - traefik.http.routers.https-web.tls=true

            - 'coolify.applicationId=${APPLICATION_ID}'
            - coolify.type=application
            - coolify.managed=true
            - coolify.version=4.0.0-beta.196
            - coolify.name=web
            - coolify.pullRequestId=0
        networks:
            coo0ccc: null
        restart: unless-stopped
        container_name: web

volumes: {}
networks:
    coo0ccc:
        name: coo0ccc
        external: true
